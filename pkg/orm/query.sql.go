// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package orm

import (
	"context"
)

const getLastNListens = `-- name: GetLastNListens :many
SELECT listen_id, spotify_song_id, spotify_href, spotify_uri, artist, artist_genres, track_name, album_name, album_image, album_image_height, album_image_width, html, listened_at FROM listen ORDER BY listen_id DESC LIMIT ?
`

func (q *Queries) GetLastNListens(ctx context.Context, limit int32) ([]Listen, error) {
	rows, err := q.db.QueryContext(ctx, getLastNListens, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listen
	for rows.Next() {
		var i Listen
		if err := rows.Scan(
			&i.ListenID,
			&i.SpotifySongID,
			&i.SpotifyHref,
			&i.SpotifyUri,
			&i.Artist,
			&i.ArtistGenres,
			&i.TrackName,
			&i.AlbumName,
			&i.AlbumImage,
			&i.AlbumImageHeight,
			&i.AlbumImageWidth,
			&i.Html,
			&i.ListenedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestListen = `-- name: GetLatestListen :one
SELECT listen_id, spotify_song_id, spotify_href, spotify_uri, artist, artist_genres, track_name, album_name, album_image, album_image_height, album_image_width, html, listened_at FROM listen ORDER BY listen_id DESC LIMIT 1
`

func (q *Queries) GetLatestListen(ctx context.Context) (Listen, error) {
	row := q.db.QueryRowContext(ctx, getLatestListen)
	var i Listen
	err := row.Scan(
		&i.ListenID,
		&i.SpotifySongID,
		&i.SpotifyHref,
		&i.SpotifyUri,
		&i.Artist,
		&i.ArtistGenres,
		&i.TrackName,
		&i.AlbumName,
		&i.AlbumImage,
		&i.AlbumImageHeight,
		&i.AlbumImageWidth,
		&i.Html,
		&i.ListenedAt,
	)
	return i, err
}

const getListenCount = `-- name: GetListenCount :one
SELECT count(listen_id) FROM listen
`

func (q *Queries) GetListenCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getListenCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
